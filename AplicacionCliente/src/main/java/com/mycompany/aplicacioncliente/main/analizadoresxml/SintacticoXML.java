
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.aplicacioncliente.main.analizadoresxml;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoXML extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoXML() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoXML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoXML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\011\000\002\003" +
    "\013\000\002\003\014\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\005\011\000\002\006\017\000\002\007\017\000\002\007" +
    "\017\000\002\007\017\000\002\007\016\000\002\010\017" +
    "\000\002\010\017\000\002\010\016\000\002\011\017\000" +
    "\002\011\016\000\002\012\016\000\002\013\006\000\002" +
    "\014\017\000\002\015\017\000\002\016\017\000\002\016" +
    "\017\000\002\017\017\000\002\020\017\000\002\020\017" +
    "\000\002\020\017\000\002\020\017\000\002\020\021\000" +
    "\002\021\017\000\002\021\017\000\002\021\017\000\002" +
    "\021\021\000\002\022\017\000\002\022\017\000\002\022" +
    "\021\000\002\023\021\000\002\023\017\000\002\024\006" +
    "\000\002\025\021\000\002\025\021\000\002\026\023\000" +
    "\002\026\021\000\002\027\014\000\002\030\012\000\002" +
    "\030\013\000\002\031\011\000\002\032\011\000\002\033" +
    "\016\000\002\034\011\000\002\035\017\000\002\036\016" +
    "\000\002\037\006\000\002\040\017\000\002\041\017\000" +
    "\002\042\013\000\002\043\014\000\002\043\014\000\002" +
    "\043\014\000\002\043\014\000\002\043\005\000\002\044" +
    "\011\000\002\047\016\000\002\047\025\000\002\047\025" +
    "\000\002\050\012\000\002\050\012\000\002\050\012\000" +
    "\002\050\021\000\002\050\021\000\002\050\021\000\002" +
    "\051\010\000\002\045\011\000\002\052\016\000\002\052" +
    "\025\000\002\052\025\000\002\053\021\000\002\053\021" +
    "\000\002\053\021\000\002\046\011\000\002\056\025\000" +
    "\002\054\017\000\002\055\010\000\002\057\005\000\002" +
    "\060\005\000\002\061\005\000\002\062\005\000\002\063" +
    "\005\000\002\064\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0289\000\004\056\004\001\002\000\004\026\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\060\010\001\002\000\004\056\011\001\002\000" +
    "\004\027\016\001\002\000\004\057\013\001\002\000\004" +
    "\026\014\001\002\000\004\060\015\001\002\000\004\002" +
    "\000\001\002\000\004\053\017\001\002\000\004\064\020" +
    "\001\002\000\004\055\021\001\002\000\022\004\022\005" +
    "\024\006\023\007\026\010\025\011\030\012\031\013\027" +
    "\001\002\000\004\055\u023f\001\002\000\004\055\u0235\001" +
    "\002\000\004\055\u01b0\001\002\000\004\055\u0174\001\002" +
    "\000\004\055\u015e\001\002\000\004\055\u015b\001\002\000" +
    "\004\055\105\001\002\000\004\055\037\001\002\000\004" +
    "\057\033\001\002\000\004\027\034\001\002\000\004\060" +
    "\035\001\002\000\006\056\011\057\uffff\001\002\000\004" +
    "\057\ufffe\001\002\000\004\060\040\001\002\000\004\056" +
    "\042\001\002\000\004\057\ufff7\001\002\000\004\030\043" +
    "\001\002\000\004\060\044\001\002\000\004\056\046\001" +
    "\002\000\004\057\102\001\002\000\004\031\047\001\002" +
    "\000\004\053\050\001\002\000\004\064\051\001\002\000" +
    "\004\055\052\001\002\000\004\014\053\001\002\000\004" +
    "\055\054\001\002\000\004\060\055\001\002\000\004\062" +
    "\056\001\002\000\004\065\100\001\002\000\004\057\060" +
    "\001\002\000\004\031\061\001\002\000\004\060\062\001" +
    "\002\000\004\056\063\001\002\000\004\031\065\001\002" +
    "\000\004\057\uffc9\001\002\000\004\053\066\001\002\000" +
    "\004\064\067\001\002\000\004\055\070\001\002\000\004" +
    "\024\071\001\002\000\004\055\072\001\002\000\004\060" +
    "\073\001\002\000\004\062\056\001\002\000\004\057\075" +
    "\001\002\000\004\031\076\001\002\000\004\060\077\001" +
    "\002\000\004\057\uffc8\001\002\000\004\063\101\001\002" +
    "\000\004\057\uffa8\001\002\000\004\030\103\001\002\000" +
    "\004\060\104\001\002\000\004\057\uffca\001\002\000\004" +
    "\060\106\001\002\000\004\056\110\001\002\000\004\057" +
    "\ufff8\001\002\000\004\030\111\001\002\000\004\060\112" +
    "\001\002\000\004\056\114\001\002\000\004\057\uffc7\001" +
    "\002\000\004\031\115\001\002\000\004\053\116\001\002" +
    "\000\004\064\117\001\002\000\004\055\120\001\002\000" +
    "\004\014\121\001\002\000\004\055\122\001\002\000\004" +
    "\060\123\001\002\000\004\062\056\001\002\000\004\057" +
    "\125\001\002\000\004\031\126\001\002\000\004\060\127" +
    "\001\002\000\004\056\131\001\002\000\004\057\uffc6\001" +
    "\002\000\004\031\132\001\002\000\004\053\133\001\002" +
    "\000\004\064\134\001\002\000\004\055\135\001\002\000" +
    "\004\024\136\001\002\000\004\055\137\001\002\000\004" +
    "\060\140\001\002\000\004\062\056\001\002\000\004\057" +
    "\142\001\002\000\004\031\143\001\002\000\004\060\144" +
    "\001\002\000\004\056\145\001\002\000\004\031\147\001" +
    "\002\000\004\057\uffc5\001\002\000\004\053\150\001\002" +
    "\000\004\064\151\001\002\000\004\055\152\001\002\000" +
    "\004\025\153\001\002\000\004\055\154\001\002\000\004" +
    "\060\155\001\002\000\004\062\156\001\002\000\014\015" +
    "\160\036\164\037\162\040\163\041\161\001\002\000\004" +
    "\057\uffc4\001\002\000\004\063\u0153\001\002\000\004\063" +
    "\u0152\001\002\000\004\063\u0107\001\002\000\004\063\314" +
    "\001\002\000\004\063\165\001\002\000\004\057\166\001" +
    "\002\000\004\031\167\001\002\000\004\060\170\001\002" +
    "\000\004\057\171\001\002\000\004\030\172\001\002\000" +
    "\004\060\173\001\002\000\004\056\175\001\002\000\004" +
    "\057\uffc2\001\002\000\004\032\176\001\002\000\004\060" +
    "\177\001\002\000\004\056\201\001\002\000\004\057\311" +
    "\001\002\000\004\033\202\001\002\000\004\053\203\001" +
    "\002\000\004\064\204\001\002\000\004\055\205\001\002" +
    "\000\004\042\206\001\002\000\004\055\207\001\002\000" +
    "\004\060\210\001\002\000\004\062\211\001\002\000\004" +
    "\071\307\001\002\000\004\057\213\001\002\000\004\033" +
    "\214\001\002\000\004\060\215\001\002\000\006\056\216" +
    "\057\uffbd\001\002\000\004\033\217\001\002\000\004\053" +
    "\220\001\002\000\004\064\221\001\002\000\004\055\222" +
    "\001\002\000\006\043\224\047\223\001\002\000\004\055" +
    "\246\001\002\000\004\055\225\001\002\000\004\060\227" +
    "\001\002\000\004\057\uffbc\001\002\000\004\062\230\001" +
    "\002\000\010\044\233\045\232\046\231\001\002\000\004" +
    "\063\273\001\002\000\004\063\260\001\002\000\004\063" +
    "\234\001\002\000\004\057\235\001\002\000\004\033\236" +
    "\001\002\000\004\060\237\001\002\000\006\056\240\057" +
    "\uffba\001\002\000\004\033\241\001\002\000\004\053\242" +
    "\001\002\000\004\064\243\001\002\000\004\055\244\001" +
    "\002\000\004\047\245\001\002\000\004\055\246\001\002" +
    "\000\004\060\250\001\002\000\004\057\uffb7\001\002\000" +
    "\004\062\252\001\002\000\004\057\255\001\002\000\004" +
    "\070\253\001\002\000\004\063\254\001\002\000\004\057" +
    "\uffa3\001\002\000\004\033\256\001\002\000\004\060\257" +
    "\001\002\000\004\057\uffb4\001\002\000\004\057\261\001" +
    "\002\000\004\033\262\001\002\000\004\060\263\001\002" +
    "\000\006\056\264\057\uffb9\001\002\000\004\033\265\001" +
    "\002\000\004\053\266\001\002\000\004\064\267\001\002" +
    "\000\004\055\270\001\002\000\004\047\271\001\002\000" +
    "\004\055\246\001\002\000\004\057\uffb6\001\002\000\004" +
    "\057\274\001\002\000\004\033\275\001\002\000\004\060" +
    "\276\001\002\000\006\056\277\057\uffb8\001\002\000\004" +
    "\033\300\001\002\000\004\053\301\001\002\000\004\064" +
    "\302\001\002\000\004\055\303\001\002\000\004\047\304" +
    "\001\002\000\004\055\246\001\002\000\004\057\uffb5\001" +
    "\002\000\004\057\uffbb\001\002\000\004\063\310\001\002" +
    "\000\004\057\uffa7\001\002\000\004\032\312\001\002\000" +
    "\004\060\313\001\002\000\004\057\uffbe\001\002\000\004" +
    "\057\315\001\002\000\004\031\316\001\002\000\004\060" +
    "\317\001\002\000\004\057\320\001\002\000\004\030\321" +
    "\001\002\000\004\060\322\001\002\000\004\056\324\001" +
    "\002\000\004\057\uffc0\001\002\000\004\032\325\001\002" +
    "\000\004\060\326\001\002\000\004\056\330\001\002\000" +
    "\004\057\u0104\001\002\000\004\033\331\001\002\000\004" +
    "\053\332\001\002\000\004\064\333\001\002\000\004\055" +
    "\334\001\002\000\004\050\335\001\002\000\004\055\336" +
    "\001\002\000\004\060\337\001\002\000\004\062\340\001" +
    "\002\000\004\066\u0102\001\002\000\004\057\342\001\002" +
    "\000\004\033\343\001\002\000\004\060\344\001\002\000" +
    "\004\056\345\001\002\000\004\033\346\001\002\000\004" +
    "\053\347\001\002\000\004\064\350\001\002\000\004\055" +
    "\351\001\002\000\004\051\352\001\002\000\004\055\353" +
    "\001\002\000\004\060\355\001\002\000\004\057\uffab\001" +
    "\002\000\004\062\357\001\002\000\004\057\362\001\002" +
    "\000\004\072\360\001\002\000\004\063\361\001\002\000" +
    "\004\057\uffa4\001\002\000\004\033\363\001\002\000\004" +
    "\060\364\001\002\000\004\056\365\001\002\000\004\033" +
    "\366\001\002\000\004\053\367\001\002\000\004\064\370" +
    "\001\002\000\004\055\371\001\002\000\004\052\372\001" +
    "\002\000\004\055\373\001\002\000\004\060\375\001\002" +
    "\000\004\057\uffaa\001\002\000\004\062\357\001\002\000" +
    "\004\057\377\001\002\000\004\033\u0100\001\002\000\004" +
    "\060\u0101\001\002\000\004\057\uffa9\001\002\000\004\063" +
    "\u0103\001\002\000\004\057\uffa6\001\002\000\004\032\u0105" +
    "\001\002\000\004\060\u0106\001\002\000\004\057\uffac\001" +
    "\002\000\004\057\u0108\001\002\000\004\031\u0109\001\002" +
    "\000\004\060\u010a\001\002\000\004\057\u010b\001\002\000" +
    "\004\030\u010c\001\002\000\004\060\u010d\001\002\000\004" +
    "\056\u010f\001\002\000\004\057\uffc1\001\002\000\004\032" +
    "\u0110\001\002\000\004\060\u0111\001\002\000\004\056\u0112" +
    "\001\002\000\004\033\u0117\001\002\000\004\057\u0114\001" +
    "\002\000\004\032\u0115\001\002\000\004\060\u0116\001\002" +
    "\000\004\057\uffb3\001\002\000\004\053\u0118\001\002\000" +
    "\004\064\u0119\001\002\000\004\055\u011a\001\002\000\004" +
    "\050\u011b\001\002\000\004\055\u011c\001\002\000\004\060" +
    "\u011d\001\002\000\004\062\340\001\002\000\004\057\u011f" +
    "\001\002\000\004\033\u0120\001\002\000\004\060\u0121\001" +
    "\002\000\006\056\u0122\057\uffb2\001\002\000\004\033\u0123" +
    "\001\002\000\004\053\u0124\001\002\000\004\064\u0125\001" +
    "\002\000\004\055\u0126\001\002\000\006\043\u0127\051\u0128" +
    "\001\002\000\004\055\u012a\001\002\000\004\055\353\001" +
    "\002\000\004\057\uffb0\001\002\000\004\060\u012c\001\002" +
    "\000\004\057\uffb1\001\002\000\004\062\u012d\001\002\000" +
    "\010\044\u0130\045\u012f\046\u012e\001\002\000\004\063\u0147" +
    "\001\002\000\004\063\u013c\001\002\000\004\063\u0131\001" +
    "\002\000\004\057\u0132\001\002\000\004\033\u0133\001\002" +
    "\000\004\060\u0134\001\002\000\004\056\u0135\001\002\000" +
    "\004\033\u0136\001\002\000\004\053\u0137\001\002\000\004" +
    "\064\u0138\001\002\000\004\055\u0139\001\002\000\004\051" +
    "\u013a\001\002\000\004\055\353\001\002\000\004\057\uffaf" +
    "\001\002\000\004\057\u013d\001\002\000\004\033\u013e\001" +
    "\002\000\004\060\u013f\001\002\000\004\056\u0140\001\002" +
    "\000\004\033\u0141\001\002\000\004\053\u0142\001\002\000" +
    "\004\064\u0143\001\002\000\004\055\u0144\001\002\000\004" +
    "\051\u0145\001\002\000\004\055\353\001\002\000\004\057" +
    "\uffae\001\002\000\004\057\u0148\001\002\000\004\033\u0149" +
    "\001\002\000\004\060\u014a\001\002\000\004\056\u014b\001" +
    "\002\000\004\033\u014c\001\002\000\004\053\u014d\001\002" +
    "\000\004\064\u014e\001\002\000\004\055\u014f\001\002\000" +
    "\004\051\u0150\001\002\000\004\055\353\001\002\000\004" +
    "\057\uffad\001\002\000\004\057\uffbf\001\002\000\004\057" +
    "\u0154\001\002\000\004\031\u0155\001\002\000\004\060\u0156" +
    "\001\002\000\004\057\u0157\001\002\000\004\030\u0158\001" +
    "\002\000\004\060\u0159\001\002\000\004\056\175\001\002" +
    "\000\004\057\uffc3\001\002\000\004\060\u015c\001\002\000" +
    "\004\056\110\001\002\000\004\057\ufff6\001\002\000\004" +
    "\060\u015f\001\002\000\004\056\u0160\001\002\000\004\030" +
    "\u0162\001\002\000\004\057\ufffa\001\002\000\004\060\u0163" +
    "\001\002\000\004\056\u0165\001\002\000\004\057\u0171\001" +
    "\002\000\004\031\u0166\001\002\000\004\053\u0167\001\002" +
    "\000\004\064\u0168\001\002\000\004\055\u0169\001\002\000" +
    "\004\014\u016a\001\002\000\004\055\u016b\001\002\000\004" +
    "\060\u016c\001\002\000\004\062\056\001\002\000\004\057" +
    "\u016e\001\002\000\004\031\u016f\001\002\000\004\060\u0170" +
    "\001\002\000\004\057\uffcb\001\002\000\004\030\u0172\001" +
    "\002\000\004\060\u0173\001\002\000\004\057\uffcc\001\002" +
    "\000\004\060\u0175\001\002\000\004\056\u0176\001\002\000" +
    "\004\030\u0178\001\002\000\004\057\ufff9\001\002\000\004" +
    "\060\u0179\001\002\000\004\056\u017b\001\002\000\004\057" +
    "\uffd5\001\002\000\004\031\u017c\001\002\000\004\053\u017d" +
    "\001\002\000\004\064\u017e\001\002\000\004\055\u017f\001" +
    "\002\000\004\014\u0180\001\002\000\004\055\u0181\001\002" +
    "\000\004\060\u0182\001\002\000\004\062\u0183\001\002\000" +
    "\004\065\u0184\001\002\000\004\063\u0185\001\002\000\004" +
    "\057\u0186\001\002\000\004\031\u0187\001\002\000\004\060" +
    "\u0188\001\002\000\006\056\u018b\057\u018a\001\002\000\004" +
    "\057\uffd4\001\002\000\004\030\u01ae\001\002\000\004\031" +
    "\u018d\001\002\000\004\057\uffd3\001\002\000\004\053\u018e" +
    "\001\002\000\004\064\u018f\001\002\000\004\055\u0190\001" +
    "\002\000\004\015\u0191\001\002\000\004\055\u0192\001\002" +
    "\000\004\060\u0193\001\002\000\004\062\u0194\001\002\000" +
    "\004\071\u0195\001\002\000\004\063\u0196\001\002\000\004" +
    "\057\u0197\001\002\000\004\031\u0198\001\002\000\004\060" +
    "\u0199\001\002\000\004\057\u019a\001\002\000\004\030\u019c" +
    "\001\002\000\004\057\uffd1\001\002\000\004\060\u019d\001" +
    "\002\000\006\056\u019e\057\uffd2\001\002\000\004\034\u019f" +
    "\001\002\000\004\060\u01a0\001\002\000\004\056\u01a2\001" +
    "\002\000\004\057\u01ab\001\002\000\004\035\u01a3\001\002" +
    "\000\004\054\u01a4\001\002\000\004\064\u01a5\001\002\000" +
    "\004\055\u01a6\001\002\000\004\071\u01a7\001\002\000\004" +
    "\055\u01a8\001\002\000\004\061\u01a9\001\002\000\006\056" +
    "\u01a2\057\uffcf\001\002\000\004\057\uffce\001\002\000\004" +
    "\034\u01ac\001\002\000\004\060\u01ad\001\002\000\004\057" +
    "\uffd0\001\002\000\004\060\u01af\001\002\000\004\056\u019e" +
    "\001\002\000\004\060\u01b1\001\002\000\004\056\u01b3\001" +
    "\002\000\004\057\ufffc\001\002\000\004\030\u01b4\001\002" +
    "\000\004\060\u01b5\001\002\000\004\056\u01b7\001\002\000" +
    "\004\057\uffe9\001\002\000\004\031\u01b8\001\002\000\004" +
    "\053\u01b9\001\002\000\004\064\u01ba\001\002\000\004\055" +
    "\u01bb\001\002\000\004\014\u01bc\001\002\000\004\055\u01bd" +
    "\001\002\000\004\060\u01be\001\002\000\004\062\056\001" +
    "\002\000\004\057\u01c0\001\002\000\004\031\u01c1\001\002" +
    "\000\004\060\u01c2\001\002\000\004\056\u01c4\001\002\000" +
    "\004\057\uffe8\001\002\000\004\031\u01c5\001\002\000\004" +
    "\053\u01c6\001\002\000\004\064\u01c7\001\002\000\004\055" +
    "\u01c8\001\002\000\004\015\u01c9\001\002\000\004\055\u01ca" +
    "\001\002\000\004\060\u01cb\001\002\000\004\062\211\001" +
    "\002\000\004\057\u01cd\001\002\000\004\031\u01ce\001\002" +
    "\000\004\060\u01cf\001\002\000\004\056\u01d0\001\002\000" +
    "\004\031\u01d2\001\002\000\004\057\uffe7\001\002\000\004" +
    "\053\u01d3\001\002\000\004\064\u01d4\001\002\000\004\055" +
    "\u01d5\001\002\000\004\016\u01d6\001\002\000\004\055\u01d7" +
    "\001\002\000\004\060\u01d8\001\002\000\004\062\056\001" +
    "\002\000\004\057\u01da\001\002\000\004\031\u01db\001\002" +
    "\000\004\060\u01dc\001\002\000\004\056\u01de\001\002\000" +
    "\004\057\uffe5\001\002\000\004\031\u01e0\001\002\000\004" +
    "\057\uffe6\001\002\000\004\053\u01e1\001\002\000\004\064" +
    "\u01e2\001\002\000\004\055\u01e3\001\002\000\006\017\u01e5" +
    "\020\u01e4\001\002\000\004\055\u01f2\001\002\000\004\055" +
    "\u01e6\001\002\000\004\060\u01e7\001\002\000\004\062\056" +
    "\001\002\000\004\057\u01e9\001\002\000\004\031\u01ea\001" +
    "\002\000\004\060\u01eb\001\002\000\004\056\u01ed\001\002" +
    "\000\004\057\uffe4\001\002\000\004\031\u01ee\001\002\000" +
    "\004\053\u01ef\001\002\000\004\064\u01f0\001\002\000\004" +
    "\055\u01f1\001\002\000\004\020\u01e4\001\002\000\004\060" +
    "\u01f3\001\002\000\004\062\056\001\002\000\004\057\u01f5" +
    "\001\002\000\004\031\u01f6\001\002\000\004\060\u01f7\001" +
    "\002\000\006\056\u01fc\057\u01fa\001\002\000\004\057\uffe3" +
    "\001\002\000\004\057\uffe1\001\002\000\004\030\u0233\001" +
    "\002\000\004\057\uffe2\001\002\000\004\031\u01fe\001\002" +
    "\000\004\057\uffe0\001\002\000\004\053\u01ff\001\002\000" +
    "\004\064\u0200\001\002\000\004\055\u0201\001\002\000\010" +
    "\021\u0202\022\u0204\023\u0203\001\002\000\004\055\u0222\001" +
    "\002\000\004\055\u0218\001\002\000\004\055\u0205\001\002" +
    "\000\004\060\u0206\001\002\000\004\062\u0208\001\002\000" +
    "\004\057\u020b\001\002\000\004\067\u0209\001\002\000\004" +
    "\063\u020a\001\002\000\004\057\uffa5\001\002\000\004\031" +
    "\u020c\001\002\000\004\060\u020d\001\002\000\006\056\u0210" +
    "\057\u020f\001\002\000\004\057\uffda\001\002\000\004\030" +
    "\u0216\001\002\000\004\031\u0212\001\002\000\004\057\uffd9" +
    "\001\002\000\004\053\u0213\001\002\000\004\064\u0214\001" +
    "\002\000\004\055\u0215\001\002\000\004\023\u0203\001\002" +
    "\000\004\060\u0217\001\002\000\006\056\u019e\057\uffd8\001" +
    "\002\000\004\060\u0219\001\002\000\004\062\056\001\002" +
    "\000\004\057\u021b\001\002\000\004\031\u021c\001\002\000" +
    "\004\060\u021d\001\002\000\004\057\u021e\001\002\000\004" +
    "\030\u0220\001\002\000\004\057\uffd6\001\002\000\004\060" +
    "\u0221\001\002\000\006\056\u019e\057\uffd7\001\002\000\004" +
    "\060\u0223\001\002\000\004\062\u0208\001\002\000\004\057" +
    "\u0225\001\002\000\004\031\u0226\001\002\000\004\060\u0227" +
    "\001\002\000\006\056\u022b\057\u0229\001\002\000\004\057" +
    "\uffdd\001\002\000\004\030\u0231\001\002\000\004\057\uffde" +
    "\001\002\000\004\031\u022d\001\002\000\004\057\uffdc\001" +
    "\002\000\004\053\u022e\001\002\000\004\064\u022f\001\002" +
    "\000\004\055\u0230\001\002\000\006\022\u0204\023\u0203\001" +
    "\002\000\004\060\u0232\001\002\000\006\056\u019e\057\uffdb" +
    "\001\002\000\004\060\u0234\001\002\000\006\056\u019e\057" +
    "\uffdf\001\002\000\004\060\u0236\001\002\000\004\056\u0238" +
    "\001\002\000\004\057\ufffb\001\002\000\004\030\u0239\001" +
    "\002\000\004\060\u023a\001\002\000\004\056\u0165\001\002" +
    "\000\004\057\u023c\001\002\000\004\030\u023d\001\002\000" +
    "\004\060\u023e\001\002\000\004\057\uffcd\001\002\000\004" +
    "\060\u0240\001\002\000\004\056\u0241\001\002\000\004\030" +
    "\u0243\001\002\000\004\057\ufffd\001\002\000\004\060\u0244" +
    "\001\002\000\004\056\u0246\001\002\000\004\057\u0289\001" +
    "\002\000\004\031\u0247\001\002\000\004\053\u0248\001\002" +
    "\000\004\064\u0249\001\002\000\004\055\u024a\001\002\000" +
    "\004\014\u024b\001\002\000\004\055\u024c\001\002\000\004" +
    "\060\u024d\001\002\000\004\062\056\001\002\000\004\057" +
    "\u024f\001\002\000\004\031\u0250\001\002\000\004\060\u0251" +
    "\001\002\000\004\056\u0253\001\002\000\004\057\ufff4\001" +
    "\002\000\004\031\u0254\001\002\000\004\053\u0255\001\002" +
    "\000\004\064\u0256\001\002\000\004\055\u0257\001\002\000" +
    "\004\020\u0258\001\002\000\004\055\u0259\001\002\000\004" +
    "\060\u025a\001\002\000\004\062\056\001\002\000\004\057" +
    "\u025c\001\002\000\004\031\u025d\001\002\000\004\060\u025e" +
    "\001\002\000\006\056\u0262\057\ufff0\001\002\000\004\057" +
    "\ufff3\001\002\000\004\057\ufff1\001\002\000\004\057\ufff2" +
    "\001\002\000\004\031\u0263\001\002\000\004\053\u0264\001" +
    "\002\000\004\064\u0265\001\002\000\004\055\u0266\001\002" +
    "\000\010\021\u0267\022\u0269\023\u0268\001\002\000\004\055" +
    "\u027c\001\002\000\004\055\u0276\001\002\000\004\055\u026a" +
    "\001\002\000\004\060\u026b\001\002\000\004\062\u0208\001" +
    "\002\000\004\057\u026d\001\002\000\004\031\u026e\001\002" +
    "\000\004\060\u026f\001\002\000\006\056\u0271\057\uffeb\001" +
    "\002\000\004\057\uffec\001\002\000\004\031\u0272\001\002" +
    "\000\004\053\u0273\001\002\000\004\064\u0274\001\002\000" +
    "\004\055\u0275\001\002\000\004\023\u0268\001\002\000\004" +
    "\060\u0277\001\002\000\004\062\056\001\002\000\004\057" +
    "\u0279\001\002\000\004\031\u027a\001\002\000\004\060\u027b" +
    "\001\002\000\004\057\uffea\001\002\000\004\060\u027d\001" +
    "\002\000\004\062\u0208\001\002\000\004\057\u027f\001\002" +
    "\000\004\031\u0280\001\002\000\004\060\u0281\001\002\000" +
    "\006\056\u0284\057\uffed\001\002\000\004\057\uffee\001\002" +
    "\000\004\057\uffef\001\002\000\004\031\u0285\001\002\000" +
    "\004\053\u0286\001\002\000\004\064\u0287\001\002\000\004" +
    "\055\u0288\001\002\000\006\022\u0269\023\u0268\001\002\000" +
    "\004\030\u028a\001\002\000\004\060\u028b\001\002\000\004" +
    "\057\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0289\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\305\001\001\000\004" +
    "\050\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\355\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\u0112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\u012a\001\001\000\004" +
    "\054\u0128\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\u013a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\u0150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\u0159\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u015c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u0160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u0163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u016c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u0179\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\u0188\027\u018b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u019a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u01a0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\u01a9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u01b1\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u01b5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u01be\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u01c2\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\u01cb\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u01d0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u01d8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\u01de\020\u01dc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\u01e7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u01eb\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\u01f3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\u01f7\022\u01fa\023\u01f8\027\u01fc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\u0206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\u020d\027\u0210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u0219\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u021e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\u0223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\u0229\023\u0227\027\u022b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u0236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\u023a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u024d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u0251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\u025a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\u025e\011" +
    "\u0260\012\u025f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\u026b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u026f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\u0277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\u027d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\u0282\012\u0281\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoXML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoXML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoXML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Symbol symbol;
    private String contenido;

    public SintacticoXML(LexicoXML lexico) {
        super(lexico);
    }

    public void syntax_error(Symbol cur_token) {
        symbol = cur_token;
        contenido = (String)(cur_token.value);
    }

    public Symbol getSymbol() {
        return this.symbol;
    }

    public String getContenido() {
        return this.contenido;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoXML$actions {
  private final SintacticoXML parser;

  /** Constructor */
  CUP$SintacticoXML$actions(SintacticoXML parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoXML$do_action_part00000000(
    int                        CUP$SintacticoXML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoXML$parser,
    java.util.Stack            CUP$SintacticoXML$stack,
    int                        CUP$SintacticoXML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoXML$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoXML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoXML$parser.done_parsing();
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= MENOR ACCIONES MAYOR actividad MENOR_DIAGONAL ACCIONES MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // actividad ::= MENOR ACCION NOMBRE IGUAL COMILLA operacion MENOR_DIAGONAL ACCION MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("actividad",1, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // actividad ::= MENOR ACCION NOMBRE IGUAL COMILLA operacion MENOR_DIAGONAL ACCION MAYOR actividad 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("actividad",1, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operacion ::= NUEVO_SITIO COMILLA MAYOR inicioNuevoSitio 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operacion ::= NUEVA_PAGINA COMILLA MAYOR inicioNuevaPagina 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operacion ::= BORRAR_SITIO COMILLA MAYOR inicioBorrarSitio 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operacion ::= BORRAR_PAGINA COMILLA MAYOR inicioBorrarPagina 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operacion ::= MODIFICAR_PAGINA COMILLA MAYOR inicioModificarPagina 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operacion ::= AGREGAR_COMPONENTE COMILLA MAYOR inicioAgregarOModificarComponente 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operacion ::= BORRAR_COMPONENTE COMILLA MAYOR inicioBorrarComponente 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operacion ::= MODIFICAR_COMPONENTE COMILLA MAYOR inicioAgregarOModificarComponente 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicioNuevoSitio ::= MENOR PARAMETROS MAYOR id1 MENOR_DIAGONAL PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("inicioNuevoSitio",3, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA ID COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR usuario1 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("id1",4, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // usuario1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_C COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR fecha1 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuario1",5, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // usuario1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_C COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR fechaModificacion1 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuario1",5, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // usuario1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_C COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR usuarioModificacion1 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuario1",5, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // usuario1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_C COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuario1",5, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fecha1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_C COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR fechaModificacion1 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fecha1",6, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fecha1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_C COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR usuarioModificacion1 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fecha1",6, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fecha1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_C COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fecha1",6, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fechaModificacion1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_M COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR usuarioModificacion1 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fechaModificacion1",7, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fechaModificacion1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_M COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fechaModificacion1",7, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // usuarioModificacion1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_M COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuarioModificacion1",8, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inicioNuevaPagina ::= MENOR PARAMETROS MAYOR id2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("inicioNuevaPagina",9, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA ID COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR titulo 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("id2",10, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // titulo ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA TITULO COMILLA MAYOR contenido MENOR_DIAGONAL PARAMETRO MAYOR sitio 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("titulo",11, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sitio ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA SITIO COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR padre 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("sitio",12, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sitio ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA SITIO COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR usuario2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("sitio",12, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // padre ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA PADRE COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR usuario2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("padre",13, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // usuario2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_C COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR fecha2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuario2",14, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // usuario2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_C COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR fechaModificacion2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuario2",14, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // usuario2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_C COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR usuarioModificacion2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuario2",14, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // usuario2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_C COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR etiquetas 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuario2",14, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // usuario2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_C COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR MENOR_DIAGONAL PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuario2",14, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fecha2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_C COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR fechaModificacion2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fecha2",15, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fecha2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_C COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR usuarioModificacion2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fecha2",15, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fecha2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_C COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR etiquetas 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fecha2",15, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fecha2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_C COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR MENOR_DIAGONAL PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fecha2",15, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fechaModificacion2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_M COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR usuarioModificacion2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fechaModificacion2",16, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fechaModificacion2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_M COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR etiquetas 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fechaModificacion2",16, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fechaModificacion2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA FECHA_M COMILLA MAYOR fecha MENOR_DIAGONAL PARAMETRO MAYOR MENOR_DIAGONAL PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fechaModificacion2",16, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // usuarioModificacion2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_M COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR MENOR_DIAGONAL PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuarioModificacion2",17, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // usuarioModificacion2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA USUARIO_M COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR etiquetas 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("usuarioModificacion2",17, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // inicioModificarPagina ::= MENOR PARAMETROS MAYOR id3 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("inicioModificarPagina",18, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // id3 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA ID COMILLA MAYOR CORCHETE_I PALABRA CORCHETE_D MENOR_DIAGONAL PARAMETRO MAYOR tituloModificar 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("id3",19, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // id3 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA ID COMILLA MAYOR CORCHETE_I PALABRA CORCHETE_D MENOR_DIAGONAL PARAMETRO MAYOR etiquetas 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("id3",19, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tituloModificar ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA TITULO COMILLA MAYOR CORCHETE_I CONTENIDO CORCHETE_D MENOR_DIAGONAL PARAMETRO MAYOR MENOR_DIAGONAL PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("tituloModificar",20, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tituloModificar ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA TITULO COMILLA MAYOR CORCHETE_I CONTENIDO CORCHETE_D MENOR_DIAGONAL PARAMETRO MAYOR etiquetas 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("tituloModificar",20, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // etiquetas ::= MENOR_DIAGONAL PARAMETROS MAYOR MENOR ETIQUETAS MAYOR etiqueta MENOR_DIAGONAL ETIQUETAS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("etiquetas",21, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // etiqueta ::= MENOR ETIQUETA VALOR IGUAL COMILLA CONTENIDO COMILLA MAYOR_DIAGONAL 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("etiqueta",22, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // etiqueta ::= MENOR ETIQUETA VALOR IGUAL COMILLA CONTENIDO COMILLA MAYOR_DIAGONAL etiqueta 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("etiqueta",22, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inicioBorrarSitio ::= MENOR PARAMETROS MAYOR id4 MENOR_DIAGONAL PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("inicioBorrarSitio",23, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inicioBorrarPagina ::= MENOR PARAMETROS MAYOR id4 MENOR_DIAGONAL PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("inicioBorrarPagina",24, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // id4 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA ID COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("id4",25, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inicioBorrarComponente ::= MENOR PARAMETROS MAYOR id5 MENOR_DIAGONAL PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("inicioBorrarComponente",26, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // id5 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA ID COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR pagina1 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("id5",27, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // pagina1 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA PAGINA COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("pagina1",28, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inicioAgregarOModificarComponente ::= MENOR PARAMETROS MAYOR id6 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("inicioAgregarOModificarComponente",29, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // id6 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA ID COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR pagina2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("id6",30, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pagina2 ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA PAGINA COMILLA MAYOR contexto MENOR_DIAGONAL PARAMETRO MAYOR clase 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("pagina2",31, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // clase ::= MENOR PARAMETRO NOMBRE IGUAL COMILLA CLASE COMILLA MAYOR tipo 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("clase",32, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo ::= CORCHETE_I TITULO CORCHETE_D MENOR_DIAGONAL PARAMETRO MAYOR MENOR_DIAGONAL PARAMETROS MAYOR atributos1 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo ::= CORCHETE_I PARRAFO CORCHETE_D MENOR_DIAGONAL PARAMETRO MAYOR MENOR_DIAGONAL PARAMETROS MAYOR atributos1 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo ::= CORCHETE_I IMAGEN CORCHETE_D MENOR_DIAGONAL PARAMETRO MAYOR MENOR_DIAGONAL PARAMETROS MAYOR atributos2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo ::= CORCHETE_I VIDEO CORCHETE_D MENOR_DIAGONAL PARAMETRO MAYOR MENOR_DIAGONAL PARAMETROS MAYOR atributos3 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo ::= CORCHETE_I MENU CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // atributos1 ::= MENOR ATRIBUTOS MAYOR atributo1 MENOR_DIAGONAL ATRIBUTOS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributos1",34, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // atributo1 ::= MENOR ATRIBUTO NOMBRE IGUAL COMILLA TEXTO COMILLA MAYOR contenido MENOR_DIAGONAL ATRIBUTO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo1",37, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // atributo1 ::= MENOR ATRIBUTO NOMBRE IGUAL COMILLA TEXTO COMILLA MAYOR contenido MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA ALINEACION atributo2 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo1",37, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // atributo1 ::= MENOR ATRIBUTO NOMBRE IGUAL COMILLA TEXTO COMILLA MAYOR contenido MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA COLOR atributo3 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo1",37, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // atributo2 ::= COMILLA MAYOR CORCHETE_I IZQUIERDA CORCHETE_D MENOR_DIAGONAL ATRIBUTO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo2",38, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atributo2 ::= COMILLA MAYOR CORCHETE_I CENTRAR CORCHETE_D MENOR_DIAGONAL ATRIBUTO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo2",38, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atributo2 ::= COMILLA MAYOR CORCHETE_I DERECHA CORCHETE_D MENOR_DIAGONAL ATRIBUTO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo2",38, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atributo2 ::= COMILLA MAYOR CORCHETE_I IZQUIERDA CORCHETE_D MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA COLOR atributo3 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo2",38, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // atributo2 ::= COMILLA MAYOR CORCHETE_I CENTRAR CORCHETE_D MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA COLOR atributo3 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo2",38, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // atributo2 ::= COMILLA MAYOR CORCHETE_I DERECHA CORCHETE_D MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA COLOR atributo3 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo2",38, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // atributo3 ::= COMILLA MAYOR color MENOR_DIAGONAL ATRIBUTO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo3",39, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // atributos2 ::= MENOR ATRIBUTOS MAYOR atributo4 MENOR_DIAGONAL ATRIBUTOS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributos2",35, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // atributo4 ::= MENOR ATRIBUTO NOMBRE IGUAL COMILLA ORIGEN COMILLA MAYOR direccion MENOR_DIAGONAL ATRIBUTO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo4",40, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // atributo4 ::= MENOR ATRIBUTO NOMBRE IGUAL COMILLA ORIGEN COMILLA MAYOR direccion MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA ALINEACION atributo5 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo4",40, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // atributo4 ::= MENOR ATRIBUTO NOMBRE IGUAL COMILLA ORIGEN COMILLA MAYOR direccion MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA ALTURA atributo6 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo4",40, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // atributo5 ::= COMILLA MAYOR CORCHETE_I IZQUIERDA CORCHETE_D MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA ALTURA atributo6 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo5",41, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // atributo5 ::= COMILLA MAYOR CORCHETE_I CENTRAR CORCHETE_D MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA ALTURA atributo6 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo5",41, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // atributo5 ::= COMILLA MAYOR CORCHETE_I DERECHA CORCHETE_D MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA ALTURA atributo6 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo5",41, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // atributos3 ::= MENOR ATRIBUTOS MAYOR atributo8 MENOR_DIAGONAL ATRIBUTOS MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributos3",36, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // atributo8 ::= MENOR ATRIBUTO NOMBRE IGUAL COMILLA ORIGEN COMILLA MAYOR direccion MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA ALTURA atributo6 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo8",44, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // atributo6 ::= COMILLA MAYOR numero MENOR_DIAGONAL ATRIBUTO MAYOR MENOR ATRIBUTO NOMBRE IGUAL COMILLA ANCHO atributo7 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo6",42, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // atributo7 ::= COMILLA MAYOR numero MENOR_DIAGONAL ATRIBUTO MAYOR 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("atributo7",43, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // contexto ::= CORCHETE_I PALABRA CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("contexto",45, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // contenido ::= CORCHETE_I CONTENIDO CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("contenido",46, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // direccion ::= CORCHETE_I URL CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("direccion",47, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // fecha ::= CORCHETE_I FECHA CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("fecha",48, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // numero ::= CORCHETE_I NUMERO CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("numero",49, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // color ::= CORCHETE_I NUMERO_COLOR CORCHETE_D 
            {
              Object RESULT =null;

              CUP$SintacticoXML$result = parser.getSymbolFactory().newSymbol("color",50, ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.elementAt(CUP$SintacticoXML$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoXML$stack.peek()), RESULT);
            }
          return CUP$SintacticoXML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoXML$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoXML$do_action(
    int                        CUP$SintacticoXML$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoXML$parser,
    java.util.Stack            CUP$SintacticoXML$stack,
    int                        CUP$SintacticoXML$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoXML$do_action_part00000000(
                               CUP$SintacticoXML$act_num,
                               CUP$SintacticoXML$parser,
                               CUP$SintacticoXML$stack,
                               CUP$SintacticoXML$top);
    }
}

}
