// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: AnalizadorLexico.flex

package com.mycompany.aplicacioncliente.main.analizadoresxml;

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class LexicoXML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\0\1\5\1\6\1\7\10\0\1\10\1\11\1\12"+
    "\12\13\1\11\1\0\1\14\1\15\1\16\2\11\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\30\1\46"+
    "\1\47\1\0\1\50\1\0\1\51\1\0\1\52\1\53"+
    "\1\54\1\30\1\55\2\30\1\56\1\57\2\30\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\4\30\1\0\1\73\u0183\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\20\11\1\12\1\13\6\11\1\14\1\15"+
    "\1\5\1\16\13\11\1\17\23\11\1\5\41\11\1\5"+
    "\16\11\1\20\22\11\1\0\1\5\3\11\1\21\3\11"+
    "\1\22\1\23\11\11\1\24\2\11\1\25\1\26\2\11"+
    "\1\27\6\11\1\30\1\0\2\11\1\31\5\11\1\0"+
    "\1\32\2\11\2\0\1\33\1\34\1\11\1\35\1\11"+
    "\1\36\2\11\1\37\1\40\1\11\1\0\3\11\1\0"+
    "\1\41\1\42\1\11\2\0\2\11\2\0\1\43\5\11"+
    "\2\0\2\11\3\0\1\11\2\0\2\11\3\0\1\44"+
    "\1\45\1\46\1\11\2\0\1\11\1\47\3\0\1\50"+
    "\2\0\1\51\1\11\4\0\1\52\1\53\1\0\1\54"+
    "\12\0\1\55\24\0\1\56\5\0\1\57\13\0\1\60"+
    "\14\0\1\61\4\0\1\62\2\0\1\63\1\64\2\0"+
    "\1\65\3\0\1\66\1\67\4\0\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\170\0\74\0\264\0\360\0\u012c"+
    "\0\u0168\0\u01a4\0\74\0\74\0\u01e0\0\u021c\0\u0258\0\u0294"+
    "\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\74\0\74\0\u05a0\0\u05dc"+
    "\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\74\0\u0744\0\74"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0348\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248"+
    "\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428"+
    "\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8"+
    "\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8"+
    "\0\u0348\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c"+
    "\0\u0348\0\u1f68\0\u1fa4\0\u1fe0\0\u0348\0\u0348\0\u201c\0\u2058"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u0348"+
    "\0\u2238\0\u2274\0\u0348\0\u0348\0\u22b0\0\u22ec\0\u0348\0\u2328"+
    "\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u0348\0\u2490\0\u24cc"+
    "\0\u2508\0\u0348\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670"+
    "\0\u0348\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u0348\0\u0348\0\u279c"+
    "\0\u0348\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u0348\0\u2904"+
    "\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u0348\0\u0348\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u0348\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0"+
    "\0\u300c\0\u3048\0\u3084\0\u0348\0\u2df0\0\u2ee0\0\u30c0\0\u30fc"+
    "\0\u3138\0\u3174\0\u0348\0\u31b0\0\u31ec\0\u3228\0\u0348\0\u3264"+
    "\0\u32a0\0\u0348\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408"+
    "\0\74\0\u3444\0\u0348\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570"+
    "\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c\0\u0348\0\u36d8\0\u3714"+
    "\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4"+
    "\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4"+
    "\0\u3b10\0\u3b4c\0\74\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78"+
    "\0\74\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c"+
    "\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\74\0\u3f48\0\u3f84\0\u3fc0"+
    "\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0"+
    "\0\u41dc\0\74\0\u4218\0\u4254\0\u4290\0\u42cc\0\74\0\u4308"+
    "\0\u4344\0\74\0\74\0\u4380\0\u43bc\0\74\0\u43f8\0\u4434"+
    "\0\u4470\0\74\0\74\0\u44ac\0\u44e8\0\u4524\0\u4560\0\74"+
    "\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\2\7\1\2"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\23\1\24\2\23\1\25\1\26"+
    "\1\27\1\30\2\23\1\31\1\32\1\33\1\34\3\23"+
    "\1\35\1\36\1\7\1\37\2\23\1\40\1\41\3\23"+
    "\1\42\1\23\1\43\5\23\1\44\1\7\76\0\1\3"+
    "\104\0\1\6\3\0\30\6\3\0\22\6\13\0\1\45"+
    "\3\0\30\45\3\0\22\45\16\0\1\46\70\0\1\47"+
    "\72\0\1\50\74\0\1\23\3\0\6\23\1\51\3\23"+
    "\1\52\1\23\1\53\5\23\1\54\5\23\3\0\16\23"+
    "\1\54\3\23\13\0\1\23\3\0\15\23\1\55\12\23"+
    "\3\0\22\23\13\0\1\23\3\0\4\23\1\56\5\23"+
    "\1\57\2\23\1\60\12\23\3\0\22\23\13\0\1\23"+
    "\3\0\4\23\1\61\23\23\3\0\22\23\13\0\1\23"+
    "\3\0\22\23\1\62\5\23\3\0\16\23\1\62\3\23"+
    "\13\0\1\23\3\0\4\23\1\63\23\23\3\0\22\23"+
    "\13\0\1\23\3\0\30\23\3\0\22\23\13\0\1\23"+
    "\3\0\3\23\1\64\7\23\1\65\13\23\1\66\3\0"+
    "\22\23\13\0\1\23\3\0\4\23\1\67\10\23\1\70"+
    "\12\23\3\0\22\23\13\0\1\23\3\0\23\23\1\71"+
    "\4\23\3\0\22\23\13\0\1\23\3\0\20\23\1\72"+
    "\7\23\3\0\22\23\13\0\1\23\3\0\1\73\27\23"+
    "\3\0\22\23\13\0\1\23\3\0\10\23\1\74\17\23"+
    "\3\0\22\23\13\0\1\23\3\0\4\23\1\75\3\23"+
    "\1\76\17\23\3\0\22\23\13\0\1\23\3\0\21\23"+
    "\1\77\6\23\3\0\22\23\13\0\1\23\3\0\10\23"+
    "\1\100\17\23\3\0\22\23\13\0\1\23\3\0\22\23"+
    "\1\54\5\23\3\0\2\23\1\101\13\23\1\102\3\23"+
    "\13\0\1\23\3\0\22\23\1\62\5\23\3\0\16\23"+
    "\1\103\3\23\13\0\1\23\3\0\30\23\3\0\16\23"+
    "\1\104\3\23\13\0\1\23\3\0\30\23\3\0\11\23"+
    "\1\105\10\23\13\0\1\23\3\0\30\23\3\0\1\106"+
    "\21\23\13\0\1\23\3\0\30\23\3\0\1\107\21\23"+
    "\13\0\1\45\3\0\30\45\3\0\21\45\14\0\1\110"+
    "\73\0\1\23\3\0\20\23\1\111\7\23\3\0\22\23"+
    "\13\0\1\23\3\0\10\23\1\112\11\23\1\113\5\23"+
    "\3\0\22\23\13\0\1\23\3\0\2\23\1\114\25\23"+
    "\3\0\22\23\13\0\1\23\3\0\20\23\1\115\7\23"+
    "\3\0\14\23\1\115\5\23\13\0\1\23\3\0\20\23"+
    "\1\116\7\23\3\0\22\23\13\0\1\23\3\0\14\23"+
    "\1\117\13\23\3\0\22\23\13\0\1\23\3\0\1\120"+
    "\27\23\3\0\22\23\13\0\1\23\3\0\12\23\1\121"+
    "\15\23\3\0\22\23\13\0\1\23\3\0\20\23\1\122"+
    "\7\23\3\0\22\23\13\0\1\23\3\0\10\23\1\123"+
    "\17\23\3\0\5\23\1\123\14\23\13\0\1\23\3\0"+
    "\2\23\1\124\25\23\3\0\22\23\13\0\1\23\3\0"+
    "\1\125\27\23\3\0\22\23\13\0\1\23\3\0\17\23"+
    "\1\126\10\23\3\0\22\23\13\0\1\23\3\0\14\23"+
    "\1\127\13\23\3\0\22\23\13\0\1\23\3\0\3\23"+
    "\1\130\24\23\3\0\22\23\13\0\1\23\3\0\4\23"+
    "\1\131\23\23\3\0\22\23\13\0\1\23\3\0\10\23"+
    "\1\132\17\23\3\0\22\23\13\0\1\23\3\0\3\23"+
    "\1\133\2\23\1\134\11\23\1\135\7\23\3\0\22\23"+
    "\13\0\1\23\3\0\22\23\1\136\5\23\3\0\22\23"+
    "\13\0\1\23\3\0\26\23\1\137\1\23\3\0\22\23"+
    "\13\0\1\23\3\0\22\23\1\140\5\23\3\0\22\23"+
    "\13\0\1\23\3\0\23\23\1\141\4\23\3\0\22\23"+
    "\13\0\1\23\3\0\3\23\1\142\24\23\3\0\22\23"+
    "\13\0\1\23\3\0\30\23\3\0\2\23\1\143\17\23"+
    "\13\0\1\23\3\0\20\23\1\115\7\23\3\0\14\23"+
    "\1\144\5\23\13\0\1\23\3\0\10\23\1\123\17\23"+
    "\3\0\5\23\1\145\14\23\13\0\1\23\3\0\30\23"+
    "\3\0\16\23\1\146\3\23\13\0\1\23\3\0\30\23"+
    "\3\0\7\23\1\147\12\23\13\0\1\23\3\0\30\23"+
    "\3\0\14\23\1\150\5\23\13\0\1\23\3\0\30\23"+
    "\3\0\6\23\1\151\13\23\13\0\1\152\73\0\1\23"+
    "\3\0\4\23\1\153\23\23\3\0\22\23\13\0\1\23"+
    "\3\0\14\23\1\154\13\23\3\0\22\23\13\0\1\23"+
    "\3\0\23\23\1\155\4\23\3\0\22\23\13\0\1\23"+
    "\3\0\7\23\1\156\20\23\3\0\22\23\13\0\1\23"+
    "\3\0\10\23\1\157\17\23\3\0\5\23\1\157\14\23"+
    "\13\0\1\23\3\0\20\23\1\160\7\23\3\0\22\23"+
    "\13\0\1\23\3\0\22\23\1\161\5\23\3\0\22\23"+
    "\13\0\1\23\3\0\21\23\1\162\6\23\3\0\22\23"+
    "\13\0\1\23\3\0\15\23\1\163\12\23\3\0\22\23"+
    "\13\0\1\23\3\0\4\23\1\164\23\23\3\0\22\23"+
    "\13\0\1\23\3\0\17\23\1\165\10\23\3\0\13\23"+
    "\1\165\6\23\13\0\1\23\3\0\7\23\1\166\20\23"+
    "\3\0\22\23\13\0\1\23\3\0\6\23\1\167\21\23"+
    "\3\0\22\23\13\0\1\23\3\0\23\23\1\170\4\23"+
    "\3\0\22\23\13\0\1\23\3\0\23\23\1\171\4\23"+
    "\3\0\22\23\13\0\1\23\3\0\10\23\1\172\17\23"+
    "\3\0\22\23\13\0\1\23\3\0\24\23\1\173\3\23"+
    "\3\0\22\23\13\0\1\23\3\0\6\23\1\174\21\23"+
    "\3\0\22\23\13\0\1\23\3\0\20\23\1\175\7\23"+
    "\3\0\22\23\13\0\1\23\3\0\10\23\1\176\17\23"+
    "\3\0\22\23\13\0\1\23\3\0\20\23\1\177\7\23"+
    "\3\0\22\23\13\0\1\23\3\0\10\23\1\200\17\23"+
    "\3\0\22\23\13\0\1\23\3\0\22\23\1\201\5\23"+
    "\3\0\22\23\13\0\1\23\3\0\23\23\1\202\4\23"+
    "\3\0\22\23\13\0\1\23\3\0\1\203\27\23\3\0"+
    "\22\23\13\0\1\23\3\0\4\23\1\204\23\23\3\0"+
    "\22\23\13\0\1\23\3\0\30\23\3\0\5\23\1\205"+
    "\14\23\13\0\1\23\3\0\10\23\1\157\17\23\3\0"+
    "\5\23\1\206\14\23\13\0\1\23\3\0\17\23\1\165"+
    "\10\23\3\0\13\23\1\207\6\23\13\0\1\23\3\0"+
    "\30\23\3\0\12\23\1\210\7\23\13\0\1\23\3\0"+
    "\30\23\3\0\1\23\1\211\20\23\13\0\1\23\3\0"+
    "\30\23\3\0\1\212\21\23\13\0\1\23\3\0\30\23"+
    "\3\0\11\23\1\213\10\23\12\0\1\214\1\215\73\0"+
    "\1\23\3\0\6\23\1\216\21\23\3\0\22\23\13\0"+
    "\1\23\3\0\4\23\1\217\23\23\3\0\22\23\13\0"+
    "\1\23\3\0\20\23\1\220\7\23\3\0\22\23\13\0"+
    "\1\23\3\0\15\23\1\221\12\23\3\0\22\23\13\0"+
    "\1\23\3\0\1\23\1\222\26\23\3\0\1\23\1\222"+
    "\20\23\13\0\1\23\3\0\1\223\27\23\3\0\22\23"+
    "\13\0\1\23\3\0\20\23\1\224\7\23\3\0\22\23"+
    "\13\0\1\23\3\0\4\23\1\225\23\23\3\0\22\23"+
    "\13\0\1\23\3\0\20\23\1\226\7\23\3\0\22\23"+
    "\13\0\1\23\3\0\2\23\1\227\25\23\3\0\22\23"+
    "\13\0\1\23\3\0\23\23\1\230\4\23\3\0\17\23"+
    "\1\230\2\23\13\0\1\23\3\0\1\231\27\23\3\0"+
    "\22\23\13\0\1\23\3\0\4\23\1\232\23\23\3\0"+
    "\22\23\13\0\1\23\3\0\10\23\1\233\17\23\3\0"+
    "\22\23\13\0\1\23\3\0\5\23\1\234\22\23\3\0"+
    "\22\23\13\0\1\23\3\0\1\235\14\23\1\236\12\23"+
    "\3\0\22\23\13\0\1\23\3\0\4\23\1\237\23\23"+
    "\3\0\22\23\13\0\1\23\3\0\4\23\1\240\23\23"+
    "\3\0\22\23\13\0\1\23\3\0\14\23\1\241\13\23"+
    "\3\0\22\23\13\0\1\23\3\0\1\242\27\23\3\0"+
    "\22\23\13\0\1\23\3\0\15\23\1\243\12\23\3\0"+
    "\22\23\13\0\1\23\3\0\15\23\1\244\12\23\3\0"+
    "\22\23\13\0\1\23\3\0\12\23\1\245\15\23\3\0"+
    "\22\23\13\0\1\23\3\0\20\23\1\246\7\23\3\0"+
    "\22\23\13\0\1\23\3\0\15\23\1\247\12\23\3\0"+
    "\22\23\13\0\1\23\3\0\30\23\3\0\11\23\1\250"+
    "\10\23\13\0\1\23\3\0\1\23\1\222\26\23\3\0"+
    "\1\23\1\251\20\23\13\0\1\23\3\0\23\23\1\230"+
    "\4\23\3\0\17\23\1\252\2\23\13\0\1\23\3\0"+
    "\30\23\3\0\15\23\1\253\4\23\13\0\1\23\3\0"+
    "\30\23\3\0\14\23\1\254\5\23\13\0\1\23\3\0"+
    "\30\23\3\0\7\23\1\255\12\23\13\0\1\23\3\0"+
    "\30\23\3\0\14\23\1\256\5\23\13\0\1\257\73\0"+
    "\1\215\73\0\1\23\3\0\1\260\27\23\3\0\22\23"+
    "\13\0\1\23\3\0\1\261\27\23\3\0\22\23\13\0"+
    "\1\23\3\0\1\262\27\23\3\0\22\23\13\0\1\23"+
    "\3\0\23\23\1\263\4\23\3\0\17\23\1\263\2\23"+
    "\13\0\1\23\3\0\20\23\1\264\7\23\3\0\22\23"+
    "\13\0\1\23\3\0\1\265\27\23\3\0\22\23\13\0"+
    "\1\23\3\0\7\23\1\266\20\23\3\0\22\23\13\0"+
    "\1\23\3\0\4\23\1\267\23\23\3\0\3\23\1\267"+
    "\16\23\13\0\1\23\3\0\30\23\2\0\1\270\22\23"+
    "\13\0\1\23\3\0\14\23\1\271\13\23\3\0\22\23"+
    "\13\0\1\23\3\0\4\23\1\272\23\23\3\0\22\23"+
    "\13\0\1\23\3\0\10\23\1\273\17\23\3\0\22\23"+
    "\13\0\1\23\3\0\30\23\2\0\1\274\22\23\13\0"+
    "\1\23\3\0\30\23\2\0\1\275\22\23\13\0\1\23"+
    "\3\0\14\23\1\276\13\23\3\0\22\23\13\0\1\23"+
    "\3\0\1\277\27\23\3\0\22\23\13\0\1\23\3\0"+
    "\5\23\1\300\22\23\3\0\22\23\13\0\1\23\3\0"+
    "\15\23\1\301\12\23\3\0\22\23\13\0\1\23\3\0"+
    "\10\23\1\302\17\23\3\0\22\23\13\0\1\23\3\0"+
    "\30\23\3\0\10\23\1\303\11\23\13\0\1\23\3\0"+
    "\23\23\1\263\4\23\3\0\17\23\1\304\2\23\13\0"+
    "\1\23\3\0\4\23\1\267\23\23\3\0\3\23\1\305"+
    "\16\23\4\0\1\306\3\0\3\306\1\253\1\0\1\306"+
    "\1\0\30\253\2\0\1\306\22\253\13\0\1\23\3\0"+
    "\30\23\3\0\3\23\1\307\16\23\13\0\1\23\3\0"+
    "\30\23\3\0\3\23\1\310\16\23\13\0\1\311\73\0"+
    "\1\23\3\0\20\23\1\312\7\23\3\0\22\23\13\0"+
    "\1\23\3\0\2\23\1\313\25\23\3\0\22\23\13\0"+
    "\1\23\3\0\22\23\1\314\5\23\3\0\16\23\1\314"+
    "\3\23\13\0\1\23\3\0\30\23\2\0\1\315\22\23"+
    "\13\0\1\23\3\0\20\23\1\316\7\23\3\0\22\23"+
    "\13\0\1\23\3\0\1\317\27\23\3\0\22\23\13\0"+
    "\1\23\3\0\22\23\1\320\5\23\3\0\16\23\1\320"+
    "\3\23\21\0\1\321\10\0\1\322\54\0\1\23\3\0"+
    "\20\23\1\323\7\23\3\0\22\23\13\0\1\23\3\0"+
    "\2\23\1\324\25\23\3\0\22\23\35\0\1\325\76\0"+
    "\1\326\46\0\1\23\3\0\15\23\1\327\12\23\3\0"+
    "\22\23\13\0\1\23\3\0\15\23\1\330\12\23\3\0"+
    "\22\23\13\0\1\23\3\0\30\23\3\0\3\23\1\331"+
    "\16\23\13\0\1\23\3\0\22\23\1\314\5\23\3\0"+
    "\16\23\1\332\3\23\13\0\1\23\3\0\22\23\1\320"+
    "\5\23\3\0\16\23\1\333\3\23\4\0\1\306\3\0"+
    "\4\306\1\0\1\306\1\0\30\306\2\0\23\306\13\0"+
    "\1\23\3\0\30\23\3\0\16\23\1\334\3\23\12\0"+
    "\1\335\74\0\1\23\3\0\30\23\2\0\1\336\22\23"+
    "\13\0\1\23\3\0\10\23\1\337\17\23\3\0\22\23"+
    "\13\0\1\23\3\0\15\23\1\340\12\23\3\0\11\23"+
    "\1\340\10\23\21\0\1\341\13\0\1\342\2\0\1\343"+
    "\46\0\1\23\3\0\1\344\27\23\3\0\1\344\21\23"+
    "\37\0\1\345\70\0\1\346\52\0\1\23\3\0\3\23"+
    "\1\347\24\23\3\0\22\23\13\0\1\23\3\0\1\350"+
    "\27\23\3\0\22\23\17\0\1\351\103\0\1\352\57\0"+
    "\1\23\3\0\30\23\2\0\1\353\22\23\13\0\1\23"+
    "\3\0\30\23\3\0\15\23\1\354\4\23\13\0\1\23"+
    "\3\0\15\23\1\340\12\23\3\0\11\23\1\355\10\23"+
    "\13\0\1\23\3\0\1\344\27\23\3\0\1\356\21\23"+
    "\13\0\1\23\3\0\30\23\3\0\14\23\1\357\5\23"+
    "\13\0\1\360\101\0\1\361\65\0\1\23\3\0\15\23"+
    "\1\362\12\23\3\0\22\23\13\0\1\23\3\0\21\23"+
    "\1\363\6\23\3\0\15\23\1\363\4\23\34\0\1\364"+
    "\56\0\1\365\103\0\1\366\57\0\1\23\3\0\21\23"+
    "\1\367\6\23\3\0\15\23\1\367\4\23\23\0\1\370"+
    "\72\0\1\371\64\0\1\23\3\0\1\372\27\23\3\0"+
    "\22\23\13\0\1\23\3\0\20\23\1\373\7\23\3\0"+
    "\22\23\25\0\1\374\107\0\1\375\53\0\1\376\10\0"+
    "\1\377\54\0\1\23\3\0\30\23\3\0\11\23\1\u0100"+
    "\10\23\13\0\1\u0101\114\0\1\u0102\52\0\1\23\3\0"+
    "\14\23\1\u0103\13\23\3\0\22\23\32\0\1\u0104\66\0"+
    "\1\u0105\107\0\1\u0106\51\0\1\u0107\103\0\1\u0108\57\0"+
    "\1\23\3\0\30\23\2\0\1\u0109\22\23\27\0\1\u010a"+
    "\73\0\1\u010b\103\0\1\u010c\70\0\1\u010d\52\0\1\23"+
    "\3\0\30\23\3\0\15\23\1\u010e\4\23\32\0\1\u010f"+
    "\76\0\1\u0110\65\0\1\u0111\73\0\1\u0112\65\0\1\u0113"+
    "\76\0\1\u0114\70\0\1\u0115\13\0\1\u0116\71\0\1\u0117"+
    "\74\0\1\u0118\62\0\1\u0119\72\0\1\u011a\106\0\1\u011b"+
    "\72\0\1\u011c\72\0\1\u011d\74\0\1\u011e\66\0\1\u011f"+
    "\73\0\1\u0120\100\0\1\u0121\56\0\1\u0122\73\0\1\u0123"+
    "\125\0\1\u0124\41\0\1\u0125\103\0\1\u0126\100\0\1\u0127"+
    "\72\0\1\u0128\57\0\1\u0129\125\0\1\u012a\56\0\1\u012b"+
    "\60\0\1\u012c\104\0\1\u012d\66\0\1\u012e\112\0\1\u012f"+
    "\50\0\1\u0130\76\0\1\u0131\102\0\1\u0132\63\0\1\u0133"+
    "\114\0\1\u0134\62\0\1\u0135\57\0\1\u0136\111\0\1\u0137"+
    "\65\0\1\u0138\67\0\1\u0139\77\0\1\u013a\73\0\1\u013b"+
    "\67\0\1\u013c\103\0\1\u013d\63\0\1\u013e\71\0\1\u013f"+
    "\106\0\1\u0140\72\0\1\u0141\60\0\1\u0142\107\0\1\u0143"+
    "\60\0\1\u0144\105\0\1\u0145\101\0\1\u0146\52\0\1\u0147"+
    "\102\0\1\u0148\77\0\1\u0149\57\0\1\u014a\107\0\1\u014b"+
    "\57\0\1\u014c\115\0\1\u014d\55\0\1\u014e\104\0\1\u014f"+
    "\62\0\1\u0150\71\0\1\u0151\75\0\1\u0152\103\0\1\u0153"+
    "\73\0\1\u0154\67\0\1\u0155\105\0\1\u0156\66\0\1\u0157"+
    "\62\0\1\u0158\103\0\1\u0159\40\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17820];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\5\1\2\11\20\1\2\11"+
    "\7\1\1\11\1\1\1\11\143\1\1\0\42\1\1\0"+
    "\10\1\1\0\3\1\2\0\13\1\1\0\3\1\1\0"+
    "\3\1\2\0\2\1\2\0\6\1\2\0\2\1\3\0"+
    "\1\1\2\0\2\1\3\0\4\1\2\0\2\1\3\0"+
    "\1\1\2\0\2\1\4\0\1\1\1\11\1\0\1\1"+
    "\12\0\1\1\24\0\1\11\5\0\1\11\13\0\1\11"+
    "\14\0\1\11\4\0\1\11\2\0\2\11\2\0\1\11"+
    "\3\0\2\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoXML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Error Léxico caracter Invalido en la linea " + (yyline+1) + ", columna " + (yycolumn+1) + ": " + yytext());
            }
          // fall through
          case 58: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 59: break;
          case 3:
            { return symbol(sym.COMILLA, yytext());
            }
          // fall through
          case 60: break;
          case 4:
            { return symbol(sym.NUMERO_COLOR, yytext());
            }
          // fall through
          case 61: break;
          case 5:
            { return symbol(sym.NUMERO, yytext());
            }
          // fall through
          case 62: break;
          case 6:
            { return symbol(sym.MENOR, yytext());
            }
          // fall through
          case 63: break;
          case 7:
            { return symbol(sym.IGUAL, yytext());
            }
          // fall through
          case 64: break;
          case 8:
            { return symbol(sym.MAYOR, yytext());
            }
          // fall through
          case 65: break;
          case 9:
            { return symbol(sym.CONTENIDO, yytext());
            }
          // fall through
          case 66: break;
          case 10:
            { return symbol(sym.CORCHETE_I, yytext());
            }
          // fall through
          case 67: break;
          case 11:
            { return symbol(sym.CORCHETE_D, yytext());
            }
          // fall through
          case 68: break;
          case 12:
            { return symbol(sym.PALABRA, yytext());
            }
          // fall through
          case 69: break;
          case 13:
            { return symbol(sym.MAYOR_DIAGONAL, yytext());
            }
          // fall through
          case 70: break;
          case 14:
            { return symbol(sym.MENOR_DIAGONAL, yytext());
            }
          // fall through
          case 71: break;
          case 15:
            { return symbol(sym.ID, yytext());
            }
          // fall through
          case 72: break;
          case 16:
            { return symbol(sym.MENU, yytext());
            }
          // fall through
          case 73: break;
          case 17:
            { return symbol(sym.ANCHO, yytext());
            }
          // fall through
          case 74: break;
          case 18:
            { return symbol(sym.CLASE, yytext());
            }
          // fall through
          case 75: break;
          case 19:
            { return symbol(sym.COLOR, yytext());
            }
          // fall through
          case 76: break;
          case 20:
            { return symbol(sym.PADRE, yytext());
            }
          // fall through
          case 77: break;
          case 21:
            { return symbol(sym.SITIO, yytext());
            }
          // fall through
          case 78: break;
          case 22:
            { return symbol(sym.TEXTO, yytext());
            }
          // fall through
          case 79: break;
          case 23:
            { return symbol(sym.VIDEO, yytext());
            }
          // fall through
          case 80: break;
          case 24:
            { return symbol(sym.VALOR, yytext());
            }
          // fall through
          case 81: break;
          case 25:
            { return symbol(sym.ALTURA, yytext());
            }
          // fall through
          case 82: break;
          case 26:
            { return symbol(sym.IMAGEN, yytext());
            }
          // fall through
          case 83: break;
          case 27:
            { return symbol(sym.ORIGEN, yytext());
            }
          // fall through
          case 84: break;
          case 28:
            { return symbol(sym.PAGINA, yytext());
            }
          // fall through
          case 85: break;
          case 29:
            { return symbol(sym.TITULO, yytext());
            }
          // fall through
          case 86: break;
          case 30:
            { return symbol(sym.ACCION, yytext());
            }
          // fall through
          case 87: break;
          case 31:
            { return symbol(sym.URL, yytext());
            }
          // fall through
          case 88: break;
          case 32:
            { return symbol(sym.NOMBRE, yytext());
            }
          // fall through
          case 89: break;
          case 33:
            { return symbol(sym.CENTRAR, yytext());
            }
          // fall through
          case 90: break;
          case 34:
            { return symbol(sym.DERECHA, yytext());
            }
          // fall through
          case 91: break;
          case 35:
            { return symbol(sym.PARRAFO, yytext());
            }
          // fall through
          case 92: break;
          case 36:
            { return symbol(sym.ACCIONES, yytext());
            }
          // fall through
          case 93: break;
          case 37:
            { return symbol(sym.ATRIBUTO, yytext());
            }
          // fall through
          case 94: break;
          case 38:
            { return symbol(sym.ETIQUETA, yytext());
            }
          // fall through
          case 95: break;
          case 39:
            { return symbol(sym.ATRIBUTOS, yytext());
            }
          // fall through
          case 96: break;
          case 40:
            { return symbol(sym.ETIQUETAS, yytext());
            }
          // fall through
          case 97: break;
          case 41:
            { return symbol(sym.IZQUIERDA, yytext());
            }
          // fall through
          case 98: break;
          case 42:
            { return symbol(sym.PARAMETRO, yytext());
            }
          // fall through
          case 99: break;
          case 43:
            { return symbol(sym.FECHA, yytext());
            }
          // fall through
          case 100: break;
          case 44:
            { return symbol(sym.ALINEACION, yytext());
            }
          // fall through
          case 101: break;
          case 45:
            { return symbol(sym.PARAMETROS, yytext());
            }
          // fall through
          case 102: break;
          case 46:
            { return symbol(sym.NUEVA_PAGINA, yytext());
            }
          // fall through
          case 103: break;
          case 47:
            { return symbol(sym.BORRAR_PAGINA, yytext());
            }
          // fall through
          case 104: break;
          case 48:
            { return symbol(sym.FECHA_C, yytext());
            }
          // fall through
          case 105: break;
          case 49:
            { return symbol(sym.NUEVO_SITIO, yytext());
            }
          // fall through
          case 106: break;
          case 50:
            { return symbol(sym.BORRAR_SITIO, yytext());
            }
          // fall through
          case 107: break;
          case 51:
            { return symbol(sym.MODIFICAR_PAGINA, yytext());
            }
          // fall through
          case 108: break;
          case 52:
            { return symbol(sym.USUARIO_C, yytext());
            }
          // fall through
          case 109: break;
          case 53:
            { return symbol(sym.BORRAR_COMPONENTE, yytext());
            }
          // fall through
          case 110: break;
          case 54:
            { return symbol(sym.AGREGAR_COMPONENTE, yytext());
            }
          // fall through
          case 111: break;
          case 55:
            { return symbol(sym.FECHA_M, yytext());
            }
          // fall through
          case 112: break;
          case 56:
            { return symbol(sym.MODIFICAR_COMPONENTE, yytext());
            }
          // fall through
          case 113: break;
          case 57:
            { return symbol(sym.USUARIO_M, yytext());
            }
          // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
